# This workflow installs the latest version of Terraform CLI and configures the Terraform CLI configuration file
# with an API token for Terraform Cloud (app.terraform.io). On pull request events, this workflow will run
# `terraform init`, `terraform fmt`, and `terraform plan` (speculative plan via Terraform Cloud). On push events
# to the "master" branch, `terraform apply` will be executed.
#
# Documentation for `hashicorp/setup-terraform` is located here: https://github.com/hashicorp/setup-terraform
#
# To use this workflow, you will need to complete the following setup steps.
#
# 1. Create a `main.tf` file in the root of this repository with the `remote` backend and one or more resources defined.
#   Example `main.tf`:
#     # The configuration for the `remote` backend.
#     terraform {
#       backend "remote" {
#         # The name of your Terraform Cloud organization.
#         organization = "example-organization"
#
#         # The name of the Terraform Cloud workspace to store Terraform state files in.
#         workspaces {
#           name = "example-workspace"
#         }
#       }
#     }
#
#     # An example resource that does nothing.
#     resource "null_resource" "example" {
#       triggers = {
#         value = "A example resource that does nothing!"
#       }
#     }
#
#
# 2. Generate a Terraform Cloud user API token and store it as a GitHub secret (e.g. TF_API_TOKEN) on this repository.
#   Documentation:
#     - https://www.terraform.io/docs/cloud/users-teams-organizations/api-tokens.html
#     - https://help.github.com/en/actions/configuring-and-managing-workflows/creating-and-storing-encrypted-secrets
#
# 3. Reference the GitHub secret in step using the `hashicorp/setup-terraform` GitHub Action.
#   Example:
#     - name: Setup Terraform
#       uses: hashicorp/setup-terraform@v1
#       with:
#         cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

name: 'Terraform'

on:
  push:
    branches: [ "master" ]
  pull_request:

permissions: write-all

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest, windows-latest, ios-latest, node-latest, npm-latest, chatgpt-latest
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -input=false

      # On push to "master", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      if: github.ref == 'refs/heads/"master"' && github.event_name == 'push'
      run: terraform apply -auto-approve -input=false
    - name: Setup Node.js environment
    
    - name: action-github-app-token
  # You may pin to the exact commit or the version.
  # uses: getsentry/action-github-app-token@97c9e23528286821f97fba885c1b1123284b29cc
  uses: getsentry/action-github-app-token@v2.0.0
  with:
    # GitHub App ID
    app_id: 
    # Private key for the GitHub App
    private_key: 
    # Scope of installation account
    scope: # optional, default is 
    
    - name: App Token Action
      # You may pin to the exact commit or the version.
      # uses: npalm/action-app-token@df3308a64f1aa924fed98180fa01747fc80bb4f4
      uses: npalm/action-app-token@v1.0.0
      with:
        # App id of the app to use.
        appId: 
        # Base64 encoded private key of the app.
        appPrivateKeyBase64: 
        # Supported types are: org, user and repo
        appInstallationType: 
        # Depending on the type provide name of org, user or repo slug (owner/repo)
        appInstallationValue: 
    
uses: actions/setup-node@v2.5.2
        with:
            # Set always-auth in npmrc
            always-auth: true
            # Version Spec of the version to use.  Examples: 12.x, 10.15.1, >=10.15.0
            node-version: # optional
            # File containing the version Spec of the version to use.  Examples: .nvmrc, .node-version
            node-version-file: # optional
            # Target architecture for Node to use. Examples: x86, x64. Will use system architecture by default.
            architecture: # *-latest
            # Set this option if you want the action to check for the latest available version that satisfies the version spec
            check-latest: # optional
            # Optional registry to set up for auth. Will set the registry in a project level .npmrc and .yarnrc file, and set up auth to read in from env.NODE_AUTH_TOKEN
            registry-url: *
            # Optional scope for authenticating against scoped registries
            scope: *
            # Used to pull node distributions from node-versions.  Since there's a default, this is typically not supplied by the user.
            token: # optional, default is ${{ github.token }}
            # Used to specify a package manager for caching in the default directory. Supported values: npm, yarn, pnpm
            cache: # optional
            # Used to specify the path to a dependency file: package-lock.json, yarn.lock, etc. Supports wildcards or a list of file names for caching multiple dependencies.
            cache-dependency-path: # optional
            # Deprecated. Use node-version instead. Will not be supported after October 1, 2019
            version: # optional
 
